
AVRASM ver. 2.2.7  C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm Wed Dec 06 15:10:51 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(2): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\avrmacros.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(3): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc(5): warning: Register r16 already defined by the .DEF directive
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(3): 'C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc' included form here
C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc(6): warning: Register r17 already defined by the .DEF directive
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(3): 'C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc' included form here
C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc(7): warning: Register r18 already defined by the .DEF directive
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(3): 'C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc' included form here
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(4): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\div.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(5): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\serialfake.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(1): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(2): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\avrmacros.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(3): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\cncControl.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(4): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\div.inc'
C:\Users\Cisco\Documents\CNC\CNC\CNC\main.asm(5): Including file 'C:\Users\Cisco\Documents\CNC\CNC\CNC\serialfake.inc'
                                 
                                 .include "m328pdef.inc"		; definición de registros, bits y constantes del micro 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "avrmacros.inc"	; macros
                                 
                                 ; colección de macros
                                 ;------------------------------------------------------------------
                                 ; Sintaxis:
                                 ; 	.macro NOMBRE_MACRO
                                 ; 		; cuerpo de la macro
                                 ;		; los parámetros de la macro se referencian como
                                 ;		; @0 (1er parámetro), @1 (2do parámetro), etc.
                                 ; 	.endm
                                 ;------------------------------------------------------------------
                                 .def t0 = r16
                                 .def t1 = r17
                                 .def t2 = r18
                                 ;------------------------------------------------------------------
                                 ; save: Salva los registros temporales t0,t1,t2
                                 ;------------------------------------------------------------------
                                 .macro	save
                                 	push t0
                                 	push t1
                                 	push t2
                                 .endm
                                 ;------------------------------------------------------------------
                                 ; load: Recupera los registros temporales t0,t1,t2
                                 ;------------------------------------------------------------------
                                 .macro	load
                                 	pop t2
                                 	pop t1
                                 	pop t0
                                 .endm
                                 
                                 ;------------------------------------------------------------------
                                 ; input: usa "in"/"lds" según la dirección del registro que se lee.
                                 ;------------------------------------------------------------------
                                 .macro	input ; @0= destino {r0, ... , r31}
                                               ; @1= fuente I/0 ($0000-$FFFF)
                                 .if	@1<0x40
                                 	in	@0,@1	; si dir del reg de E/S <0x40 uso "in"
                                 .else
                                 	lds	@0,@1	; sino uso "lds"
                                 .endif
                                 .endm
                                 
                                 ;------------------------------------------------------------------
                                 ; output: usa "out"/"sts" según la dirección del registro que se escribe.
                                 ;------------------------------------------------------------------
                                 .macro	output		; @0= destino I/O ($0000-$FFFF)
                                 			; @1= fuente, cte o r0..r31
                                 .if	@0<0x40
                                 		out	@0,@1	; si dir del reg de E/S <0x40 uso "out"
                                 .else
                                 		sts	@0,@1	; sino uso "sts"
                                 .endif
                                 .endm
                                 
                                 .macro	ldiw		; carga puntero
                                 		ldi	@0L, LOW(@1)
                                 		ldi	@0H, HIGH(@1)
                                 .endm
                                 
                                 .macro	movi	; carga registro con constante
                                 	save
                                 		ldi	t0,@1
                                 		mov	@0,t0
                                 	load
                                 .endm
                                 
                                 .macro addwi	;suma un inmediato a un word
                                 	ldi t0,@1
                                 	cbr t1,$FF
                                 	add @0L,@1
                                 	adc @0H,t1
                                 .endm
                                 
                                 .macro addwb	;suma un byte a un word
                                 	push t1
                                 	add @0L,@1
                                 	cbr t1,$FF
                                 	adc @0H,t1
                                 	pop t1
                                 .endm
                                 
                                 .macro	addi	; carga registro con constante
                                 	save
                                 		ldi	t0,@1
                                 		add	@0,t0
                                 	load
                                 .endm
                                 
                                 .macro	outi	; envia a data/salida un constante
                                 	save
                                 		ldi		t0,@1
                                 		output	@0,r16
                                 	load
                                 .endm
                                 
                                 .macro	pushi	;@0		; Pone la constante @0 en la pila
                                 	save
                                 		ldi		t0,@0
                                 		push	t0
                                 	load
                                 .endm
                                 
                                 .macro	pushw	;@0		; Pone el puntero @0 de 16 bits en la pila
                                 		push	@0L
                                 		push	@0H
                                 .endm
                                 
                                 
                                 .macro	popw	;@0		; Saca el puntero @0 de 16 bits de la pila
                                 		pop		@0H
                                 		pop		@0L
                                 .endm
                                 
                                 
                                 .macro	pushio	;@0			; Pone en pila un registro de I/O
                                 	save
                                 		in		t0,@0	; usa la variable auxiliar t0
                                 		push	t0
                                 	load
                                 .endm
                                 
                                 
                                 .macro	popio	;@0			; Saca de pila un registro de I/O
                                 	save
                                 		pop		t0		; usa la variable auxiliar t0
                                 		out		@0,t0
                                 	load
                                 .endm
                                 
                                 .macro	sti		;@0,@1	; Guarda una constante de modo indirecto
                                 	save
                                 		ldi		t0,@1	; Usa: variable auxiliar "t0" y un puntero
                                 		st		@0,t0	; [3 ciclos, 2 words] @0={X, Y, Z}
                                 	load
                                 .endm
                                 
                                 .macro	stsi	;@0,@1	; Guarda una constante en SRAM
                                 	save
                                 		ldi		t0,@1	; Usa: variable auxiliar "t0".
                                 		sts		@0,t0	; [3 ciclos, 2 words] @0={any SRAM ADDRESS}
                                 	load
                                 .endm
                                 
                                 .macro	delay	;@0		; Inicia un delay de @0 ms
                                 	save
                                 		pushw Z
                                 		ldiw Z, @0
                                 		delay__delay:
                                 		.if fosc==1000000
                                 			ldi  t0, 2
                                 			ldi  t1, 75
                                 		L1: dec  t1
                                 			brne L1
                                 			dec  t0
                                 			brne L1
                                 			nop
                                 		.elif fosc==8000000
                                 			ldi  r18, 11
                                 			ldi  r19, 99
                                 		L1: dec  r19
                                 			brne L1
                                 			dec  r18
                                 			brne L1
                                 		.endif
                                 		sbiw Z,1
                                 		cpi ZL,0
                                 		brne delay__delay
                                 		cpi ZH,0
                                 		brne delay__delay
                                 		popw Z
                                 	load
                                 .include "cncControl.inc"	; manejo de la cnc
                                 
000100                           dfase:		.byte 4
000104                           apos:		.byte 1
                                 .cseg
                                 .def xi	= r16
                                 .def yi	= r17
                                 .def zi	= r18
                                 .def xpos = r23
                                 .def ypos = r24
                                 .def zpos = r25
                                 .def objx = r20
                                 .def objy = r21
                                 .def objz = r22
                                 .equ limit = 50
                                 .macro initCNC ;
                                 	stsi dfase,0x5
                                 	stsi dfase+1,0x6
                                 	stsi dfase+2,0xa
                                 	stsi dfase+3,0x9
                                 	stsi apos,0x00
                                 .endm
                                 
                                 .macro parse
                                 	getc t0
                                 	cpi t0,'G'
                                 	breq PC+2
                                 call error
                                 	getn t0
                                 	cpi t0,0
                                 	breq PC+2
                                 call error
                                 	getn t0
                                 	cpi t0,0
                                 	brne PC+2
                                 call G0
                                 	cpi t0,1
                                 	brne PC+2
                                 call G0
                                 call error
                                 .endm
                                 
                                 .macro FG0
                                 	getc t0
                                 	cpi t0,'X'
                                 	getn t0
                                 	getn t1
                                 	cpi t1,FF
                                 	breq 
                                 	
                                 .endm
                                 
                                 .macro x_add
                                 	lds xi,apos
                                 	andi xi,0x3; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	inc xi
                                 	cpi xi,4
                                 	brne PC+2
                                 	ldi xi,0
                                 	ldiw X, dfase
                                 	addwb X,xi
                                 	lds t1,apos
                                 	andi t1,0xFC; mascara inversa para guardar
                                 	or xi,t1
                                 	sts apos,xi
                                 	ld t0,X
                                 	in t1,portb
                                 	andi t1,$F0
                                 	or t0,t1
                                 	out portb,t0;UUUUXXXX
                                 	inc xpos
                                 .endm
                                 
                                 .macro x_sub
                                 	lds xi,apos
                                 	andi xi,0x3; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	dec xi
                                 	cpi xi,0xFF
                                 	brne PC+2
                                 	ldi xi,3
                                 	ldiw X, dfase
                                 	addwb X,xi
                                 	lds t1,apos
                                 	andi t1,0xFC; mascara inversa para guardar
                                 	or xi,t1
                                 	sts apos,xi
                                 	ld t0,X
                                 	in t1,portb
                                 	andi t1,$F0
                                 	or t0,t1
                                 	out portb,t0;UUUUXXXX
                                 	dec xpos
                                 .endm
                                 
                                 .macro y_add
                                 	lds yi,apos
                                 	andi yi,0x18; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	lsr yi lsr yi lsr yi
                                 	inc yi
                                 	cpi yi,4
                                 	brne PC+2
                                 	ldi yi,0
                                 	ldiw Y, dfase
                                 	addwb Y,yi
                                 	lsl yi lsl yi lsl yi
                                 	lds t0,apos
                                 	andi t0,0xE7; mascara inversa para guardar
                                 	or yi,t0
                                 	sts apos,yi
                                 	ld t0,Y
                                 	swap t0
                                 	in t1,portb
                                 	andi t1,$0F
                                 	or t0,t1
                                 	out portb,t0;YYYYUUUU
                                 	inc ypos
                                 .endm
                                 
                                 .macro y_sub
                                 	lds yi,apos
                                 	andi yi,0x18; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	lsr yi lsr yi lsr yi
                                 	dec yi
                                 	cpi yi,0xFF
                                 	brne PC+2
                                 	ldi yi,3
                                 	ldiw Y, dfase
                                 	addwb Y,yi
                                 	lsl yi lsl yi lsl yi
                                 	lds t0,apos
                                 	andi t0,0xE7; mascara inversa para guardar
                                 	or yi,t0
                                 	sts apos,yi
                                 	ld t0,Y
                                 	swap t0
                                 	in t1,portb
                                 	andi t1,$0F
                                 	or t0,t1
                                 	out portb,t0;YYYYUUUU
                                 	dec ypos
                                 .endm
                                 
                                 .macro z_add
                                 	lds zi,apos
                                 	andi zi,0xC0; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	lsr zi lsr zi lsr zi lsr zi lsr zi lsr zi
                                 	inc zi
                                 	cpi zi,4
                                 	brne PC+2
                                 	ldi zi,0
                                 	ldiw Z, dfase
                                 	addwb Z,zi
                                 	lds t0,apos
                                 	lsl zi lsl zi lsl zi lsl zi lsl zi lsl zi
                                 	andi t0,0x3F; mascara inversa para guardar
                                 	or zi,t0
                                 	sts apos,zi
                                 	ld t0,Z
                                 	in t1,portc
                                 	andi t1,$F0
                                 	or t0,t1
                                 	out portc,t0;UUUZZZZ
                                 	inc zpos
                                 .endm
                                 
                                 .macro z_sub
                                 	lds zi,apos
                                 	andi zi,0xC0; mascara de 2 bits para recuperar la posicion de rotacion en el array
                                 	lsr zi lsr zi lsr zi lsr zi lsr zi lsr zi
                                 	dec zi
                                 	cpi zi,0xFF
                                 	brne PC+2
                                 	ldi zi,3
                                 	ldiw Z, dfase
                                 	addwb Z,zi
                                 	lds t0,apos
                                 	lsl zi lsl zi lsl zi lsl zi lsl zi lsl zi
                                 	andi t0,0x3F; mascara inversa para guardar
                                 	or zi,t0
                                 	sts apos,zi
                                 	ld t0,Z
                                 	in t1,portc
                                 	andi t1,$F0
                                 	or t0,t1
                                 	out portc,t0;UUUZZZZ
                                 	dec zpos
                                 .endm
                                 
                                 ;======================TESTS;==========================
                                 .macro cnctestz2
                                 	startcncz2test:
                                 	ldi t0,50
                                 		cnct2z1:
                                 		call zsub
                                 			delay 50
                                 			dec t0
                                 		brne cnct2z1
                                 	ldi t0,50
                                 		cnct2z2:
                                 		call zadd
                                 			delay 50
                                 			dec t0
                                 		brne cnct2z2
                                 	rjmp startcncz2test
                                 .endm
                                 .macro cnctestx2
                                 	startcncx2test:
                                 	ldi t0,50
                                 		cnct2x1:
                                 		call xsub
                                 			delay 100
                                 			dec t0
                                 		brne cnct2x1
                                 	ldi t0,50
                                 		cnct2x2:
                                 		call xadd
                                 			delay 100
                                 			dec t0
                                 		brne cnct2x2
                                 	rjmp startcncx2test
                                 .endm
                                 .macro cnctestz
                                 	startcncztest:
                                 	ldi t0,50
                                 		cnctz:
                                 		call zsub
                                 			delay 50
                                 			dec t0
                                 		brne cnctz
                                 	rjmp startcncztest
                                 .endm
                                 
                                 .macro cnctestmax
                                 	startcncmaxtest:
                                 	ldi t0,100
                                 		cnctmax1:
                                 		call xadd
                                 		call yadd
                                 		//call zadd
                                 			delay 50
                                 			dec t0
                                 		brne cnctmax1
                                 	ldi t0,100
                                 		cnctmax3:
                                 		call xsub
                                 		//call yadd
                                 		//call zadd
                                 			delay 50
                                 			dec t0
                                 		brne cnctmax3
                                 	ldi t0,100
                                 		cnctmax2:
                                 		call xadd
                                 		call ysub
                                 		//call zsub
                                 			delay 50
                                 			dec t0
                                 		brne cnctmax2
                                 	ldi t0,100
                                 		cnctmax4:
                                 		call xsub
                                 		//call zsub
                                 			delay 50
                                 			dec t0
                                 		brne cnctmax4
                                 	
                                 .endm
                                 .macro cnctestcube
                                 starttest:
                                 	ldi t0,50
                                 	cnl1:
                                 	call xadd
                                 		delay 100
                                 		dec t0
                                 	brne cnl1
                                 	ldi t0,50
                                 	cnl2:
                                 	call yadd
                                 		delay 100
                                 		dec t0
                                 	brne cnl2
                                 	ldi t0,50
                                 	cnl3:
                                 	call zadd
                                 		delay 100
                                 		dec t0
                                 	brne cnl3
                                 	ldi t0,50
                                 	cnl4:
                                 	call xsub
                                 		delay 100
                                 		dec t0
                                 	brne cnl4
                                 	ldi t0,50
                                 	cnl5:
                                 	call ysub
                                 		delay 100
                                 		dec t0
                                 	brne cnl5
                                 	ldi t0,50
                                 	cnl6:
                                 	call zsub
                                 		delay 100
                                 		dec t0
                                 	brne cnl6
                                 .include "div.inc"			; division [No es totalmente mio]
                                 
                                 ;    Atmel AVR Math Library   - multiplication functions definitions
                                 ;
                                 ;    Copyright (C) 2013  Lucian Hanga
                                 ;
                                 ;    This program is free software: you can redistribute it and/or modify
                                 ;    it under the terms of the GNU General Public License as published by
                                 ;    the Free Software Foundation, either version 3 of the License, or
                                 ;    (at your option) any later version.
                                 ;
                                 ;    This program is distributed in the hope that it will be useful,
                                 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                                 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                                 ;    GNU General Public License for more details.
                                 ;
                                 ;    You should have received a copy of the GNU General Public License
                                 ;    along with this program.  If not, see <http://www.gnu.org/licenses/>.
                                 ;
                                 ;
                                 .macro div8
                                                 ;
                                                 ; proc Div8U    - (Divide 8bit Unsigned)
                                                 ;       descr:  8bit unsigned integer division
                                                 ;       params: r16 - Nominator (N)
                                                 ;               r17 - Denominator (D)
                                                 ;       ret:    r18 - Quotinent (Q)
                                                 ;               r19 - Rest (R) 
                                                 ;       alters: r18, r19
                                 Div8U:          push            r20                             ; save the registers which will be altered
                                                 push            r21                             ; r20, r21, r22
                                                 push            r22                             ; --
                                                 in              r22, SREG                       ; save the Status Register
                                                 push            r22                             ; --
                                                 .def            N = r16
                                                 .def            D = r17
                                                 .def            Q = r18
                                                 .def            R = r19
                                                 .def            index = r20
                                                 .def            tmp = r21
                                                 .def            tmpN = r22
                                                 ldi             index, 0x08                     ; load the index the bit size
                                                 mov             tmpN, N                         ; tmpN <-- N
                                                 clr             Q                               ; Q <-- 0
                                                 clr             R                               ; R <-- 0
                                 Div8U_E10:                                                      ; do
                                                 lsl             tmpN                            ;   Shift Left R:N - get in R bit by bit N, starting
                                                 rol             R                               ;                      from the most significant bit
                                                 lsl             Q                               ;   Q <-- Q << 2
                                                 mov             tmp, R                          ;   tmp <-- R - D
                                                 sub             tmp, D                          ;   --
                                                 brlo            Div8U_E20                       ;   if (R > D) then   [IMPORTANT: UNsinged comparation]
                                                 mov             R,tmp                           ;       R <-- R - D
                                                 inc             Q                               ;       Q <-- Q + 1 
                                 Div8U_E20:      dec             index                           ;   index <-- index - 1  
                                                 cpi             index, 0x00                     ; while (index > 0)
                                                 brne            Div8U_E10                       ; --
                                                 pop             r22                             ; restore the Status Register
                                                 out             SREG, r22                       ; --
                                                 pop             r22                             ; restore the altered registers
                                                 pop             r21                             ; r22, r21, r20
                                                 pop             r20                             ;
                                                 .undef          N
                                                 .undef          D
                                                 .undef          Q
                                                 .undef          R
                                                 .undef          index
                                                 .undef          tmp
                                                 .undef          tmpN
                                 .endm
                                 .include "serialfake.inc"			; division [No es totalmente mio]
                                 
000105                           inbuf: .byte 100
000169                           outbuf: .byte 100
0001cd                           pointer: .byte 1
                                 .cseg
                                 ;------------------------------------------------------------------
                                 ; initSerial: Inicializa el serial
                                 ;------------------------------------------------------------------
                                 .macro initSerial
                                 	save
                                 			sts pointer,0
                                 	load
                                 .endm
                                 
                                 ;------------------------------------------------------------------
                                 ; getc: Obtiene un caracter desde serial
                                 ;------------------------------------------------------------------
                                 .macro getc ; @0= destino {r0, ... , r31} @1-echo mode 
                                 pushw Z
                                 	save
                                 		lds t0,pointer
                                 		ldiw Z, (GCODE<<1)
                                 		addwb Z,t0
                                 		inc t0
                                 		sts pointer,t0
                                 	load
                                 		lpm @0,Z
                                 popw Z
                                 .endm
                                 ;------------------------------------------------------------------
                                 ; touch: Obtiene un caracter desde serial no lo quita del buffer
                                 ;------------------------------------------------------------------
                                 .macro touch ; @0= destino {r0, ... , r31} @1-echo mode 
                                 pushw Z
                                 	save
                                 		lds t0,pointer
                                 		ldiw Z, (GCODE<<1)
                                 		addwb Z,t0
                                 	load
                                 		lpm @0,Z
                                 popw Z
                                 .endm
                                 ;------------------------------------------------------------------
                                 ; getn: Obtiene un numero desde serial
                                 ;------------------------------------------------------------------
                                 .macro getn ; @0= destino {r0, ... , r31} retorna $ff si error
                                 	save
                                 		touch t0
                                 		mov t1,t0
                                 		subi t0,0x30
                                 		brmi PC+4
                                 		cpi t0,10
                                 		brge PC+2
                                 		rjmp PC+2
                                 		rjmp getn_out
                                 	load
                                 		getc @0
                                 		subi @0,0x30
                                 	rjmp getn_out
                                 		getn_error:
                                 			ldi @0,$FF
                                 	getn_out:	
                                 ;recordatorio t0,t1 es temporal r16,r17
                                 ;==========================================
                                 ;Inicializacion de variables
                                 .cseg
000000 3047
000001 2030
000002 3058
000003 5920
000004 2030
000005 355a
000006 470a
000007 3030
000008 5820
000009 2036
00000a 3659
00000b 470a
00000c 3130
00000d 5a20
00000e 352d
00000f 470a
000010 3130
000011 5820
000012 3933
000013 5920
000014 0a36
000015 3047
000016 2031
000017 3358
000018 2039
000019 3159
00001a 0a36
00001b 3047
00001c 2031
00001d 3258
00001e 2037
00001f 3159
000020 0a36
000021 3047
000022 2031
000023 3358
000024 2035
000025 3459
000026 0a30
000027 3047
000028 2031
000029 3658
00002a 2038
00002b 3459
00002c 0a30
00002d 3047
00002e 2031
00002f 3758
000030 2035
000031 3159
000032 0a36
000033 3047
000034 2031
000035 3658
000036 2034
000037 3159
000038 0a36
000039 3047
00003a 2031
00003b 3658
00003c 2034
00003d 3659
00003e 470a
00003f 3130
000040 5820
000041 3639
000042 5920
000043 0a36
000044 3047
000045 2031
000046 3958
000047 2036
000048 3159
000049 0a36
00004a 3047
00004b 2031
00004c 3858
00004d 2038
00004e 3159
00004f 0a36
000050 3047
000051 2031
000052 3658
000053 2031
000054 3959
000055 0a32
000056 3047
000057 2031
000058 3758
000059 2031
00005a 3959
00005b 0a32
00005c 3047
00005d 2031
00005e 3758
00005f 2031
000060 3159
000061 3230
000062 470a
000063 3130
000064 5820
000065 3033
000066 5920
000067 3031
000068 0a32
000069 3047
00006a 2031
00006b 3358
00006c 2030
00006d 3959
00006e 0a32
00006f 3047
000070 2031
000071 3458
000072 2030
000073 3959
000074 0a32
000075 3047
000076 2031
000077 3158
000078 2035
000079 3159
00007a 0a36
00007b 3047
00007c 2031
00007d 3658
00007e 5920
00007f 3631
000080 470a
000081 3130
000082 5820
000083 2036
000084 3659
000085 470a
000086 3130
000087 5a20
000088 0a35
000089 3047
00008a 2030
00008b 3358
00008c 2038
00008d 3459
00008e 0a35
00008f 3047
000090 2031
000091 2d5a
000092 0a35
000093 3047
000094 2031
000095 3658
000096 2035
000097 3459
000098 0a35
000099 3047
00009a 2031
00009b 3558
00009c 2031
00009d 5920
00009e 3039
00009f 470a
0000a0 3130
0000a1 5820
0000a2 3833
0000a3 5920
0000a4 3534
0000a5 470a
0000a6 3130
0000a7 5820
0000a8 3533
0000a9 5920
0000aa 3134
0000ab 470a
0000ac 3130
0000ad 5820
0000ae 3836
0000af 5920
0000b0 3134
0000b1 470a
0000b2 3130
0000b3 5820
0000b4 3836
0000b5 5920
0000b6 3334
0000b7 470a
0000b8 3130
0000b9 5820
0000ba 3533
0000bb 5920
0000bc 3334
0000bd 470a
0000be 3130
0000bf 5820
0000c0 3533
0000c1 5920
0000c2 3334
0000c3 470a
0000c4 3130
0000c5 5820
0000c6 3836
0000c7 5920
0000c8 3334
0000c9 470a
0000ca 3130
0000cb 5820
0000cc 3737
0000cd 5920
0000ce 3531
0000cf 470a
0000d0 3130
0000d1 5820
0000d2 3536
0000d3 5920
0000d4 3531
0000d5 470a
0000d6 3130
0000d7 5820
0000d8 3536
0000d9 5920
0000da 0a39
0000db 3047
0000dc 2031
0000dd 3958
0000de 2035
0000df 3959
0000e0 470a
0000e1 3130
0000e2 5820
0000e3 3539
0000e4 5920
0000e5 3531
0000e6 470a
0000e7 3130
0000e8 5820
0000e9 3838
0000ea 5920
0000eb 3531
0000ec 470a
0000ed 3130
0000ee 5820
0000ef 3838
0000f0 5920
0000f1 3331
0000f2 470a
0000f3 3130
0000f4 5820
0000f5 3339
0000f6 5920
0000f7 3331
0000f8 470a
0000f9 3130
0000fa 5820
0000fb 3339
0000fc 5920
0000fd 3031
0000fe 470a
0000ff 3130
000100 5820
000101 3736
000102 5920
000103 3031
000104 470a
000105 3130
000106 5820
000107 3736
000108 5920
000109 3331
00010a 470a
00010b 3130
00010c 5820
00010d 3737
00010e 5920
00010f 3331
000110 470a
000111 3130
000112 5820
000113 3737
000114 5920
000115 3231
000116 470a
000117 3130
000118 5820
000119 3836
00011a 5920
00011b 3231
00011c 470a
00011d 3130
00011e 5820
00011f 3239
000120 5920
000121 3231
000122 470a
000123 3130
000124 5820
000125 3239
000126 5920
000127 3331
000128 470a
000129 3130
00012a 5820
00012b 3837
00012c 5920
00012d 3331
00012e 470a
00012f 3130
000130 5820
000131 3837
000132 5920
000133 3531
000134 470a
000135 3130
000136 5820
000137 3838
000138 5920
000139 3531
00013a 470a
00013b 3130
00013c 5820
00013d 3638
00013e 5920
00013f 3631
000140 470a
000141 3130
000142 5820
000143 3637
000144 5920
000145 3631
000146 470a
000147 3130
000148 5820
000149 3335
00014a 2020
00014b 3959
00014c 0a30
00014d 3047
00014e 2031
00014f 3558
000150 2035
000151 3959
000152 0a30
000153 3047
000154 2031
000155 3758
000156 2038
000157 3159
000158 0a36
000159 3047
00015a 2031
00015b 3858
00015c 2030
00015d 5920
00015e 3631
00015f 470a
000160 3130
000161 5820
000162 3735
000163 5920
000164 3039
000165 470a
000166 3130
000167 5820
000168 3935
000169 5920
00016a 3039
00016b 470a
00016c 3130
00016d 5820
00016e 3238
00016f 5920
000170 3631
000171 470a
000172 3130
000173 5820
000174 3438
000175 5920
000176 3631
000177 470a
000178 3130
000179 5820
00017a 3136
00017b 5920
00017c 3039
00017d 470a
00017e 3130
00017f 5820
000180 3136
000181 5920
000182 3039
000183 470a
000184 3130
000185 5820
000186 3638
000187 5920
000188 3631
000189 470a
00018a 3130
00018b 5820
00018c 3838
00018d 5920
00018e 3631
00018f 0a20
000190 3047
000191 2031
000192 3658
000193 2030
000194 3959
000195 0a31
000196 3047
000197 2031
000198 3558
000199 2031
00019a 3959
00019b 0a31
00019c 3047
00019d 2031
00019e 3558
00019f 2031
0001a0 3959
0001a1 0a34
0001a2 3047
0001a3 2031
0001a4 3758
0001a5 2030
0001a6 3959
0001a7 0a34
0001a8 3047
0001a9 2031
0001aa 3758
0001ab 2030
0001ac 3159
0001ad 3130
0001ae 470a
0001af 3130
0001b0 5820
0001b1 3133
0001b2 5920
0001b3 3031
0001b4 0a31
0001b5 3047
0001b6 2031
0001b7 3358
0001b8 2031
0001b9 3959
0001ba 0a39
0001bb 3047
0001bc 2031
0001bd 3658
0001be 2038
0001bf 3959
0001c0 0a39
0001c1 3047
0001c2 2031
0001c3 3658
0001c4 2038
0001c5 3959
0001c6 0a38
0001c7 3047
0001c8 2031
0001c9 3358
0001ca 2031
0001cb 3959
0001cc 0a38
0001cd 3047
0001ce 2031
0001cf 3358
0001d0 2031
0001d1 3959
0001d2 0a36
0001d3 3047
0001d4 2031
0001d5 3658
0001d6 2038
0001d7 3959
0001d8 0a36
0001d9 3047
0001da 2031
0001db 3658
0001dc 2038
0001dd 3959
0001de 0a35
0001df 3047
0001e0 2031
0001e1 3358
0001e2 2031
0001e3 3959
0001e4 0a35
0001e5 3047
0001e6 2031
0001e7 3358
0001e8 2031
0001e9 3959
0001ea 0a33
0001eb 3047
0001ec 2031
0001ed 3558
0001ee 2031
0001ef 3959
0001f0 0a33
0001f1 3047
0001f2 2031
0001f3 3258
0001f4 2036
0001f5 3159
0001f6 0a36
0001f7 3047
0001f8 2031
0001f9 3258
0001fa 2034
0001fb 3159
0001fc 0a36
0001fd 3047
0001fe 2031
0001ff 3558
000200 2030
000201 3959
000202 0a35
000203 3047
000204 2031
000205 3458
000206 2039
000207 3959
000208 0a35
000209 3047
00020a 2031
00020b 3258
00020c 2033
00020d 3159
00020e 0a36
00020f 3047
000210 2031
000211 3258
000212 2031
000213 3159
000214 0a36
000215 3047
000216 2031
000217 3458
000218 2037
000219 3959
00021a 0a35
00021b 3047
00021c 2031
00021d 3458
00021e 2035
00021f 3959
000220 0a35
000221 3047
000222 2031
000223 3258
000224 2030
000225 3159
000226 0a36
000227 3047
000228 2031
000229 3158
00022a 2038
00022b 3159
00022c 0a36
00022d 3047
00022e 2031
00022f 3458
000230 2033
000231 3959
000232 0a35
000233 3047
000234 2031
000235 3458
000236 2032
000237 3959
000238 0a35
000239 3047
00023a 2031
00023b 3158
00023c 2036
00023d 3159
00023e 0a36
00023f 3047
000240 2031
000241 3158
000242 2036
000243 3159
000244 0a35
000245 3047
000246 2031
000247 3758
000248 5920
000249 3531
00024a 470a
00024b 3130
00024c 5820
00024d 2037
00024e 3759
00024f 470a
000250 3130
000251 5820
000252 3833
000253 5920
000254 0a37
000255 3047
000256 2031
000257 3358
000258 2038
000259 3859
00025a 470a
00025b 3130
00025c 5820
00025d 2038
00025e 3859
00025f 470a
000260 3130
000261 5820
000262 2038
000263 3959
000264 470a
000265 3130
000266 5820
000267 3833
000268 5920
000269 0a39
00026a 3047
00026b 2031
00026c 3358
00026d 2038
00026e 3159
00026f 0a30
000270 3047
000271 2031
000272 3858
000273 5920
000274 3031
000275 470a
000276 3130
000277 5820
000278 2038
000279 3159
00027a 0a31
00027b 3047
00027c 2031
00027d 3358
00027e 2038
00027f 3159
000280 0a31
000281 3047
000282 2031
000283 3358
000284 2038
000285 3159
000286 0a32
000287 3047
000288 2031
000289 3858
00028a 5920
00028b 3231
00028c 470a
00028d 3130
00028e 5820
00028f 2038
000290 3159
000291 0a33
000292 3047
000293 2031
000294 3358
000295 2038
000296 3159
000297 0a33
000298 3047
000299 2031
00029a 3358
00029b 2038
00029c 3159
00029d 0a34
00029e 3047
00029f 2031
0002a0 3858
0002a1 5920
0002a2 3431
0002a3 470a
0002a4 3130
0002a5 5820
0002a6 2038
0002a7 3159
0002a8 0a35
0002a9 3047
0002aa 2031
0002ab 3358
0002ac 2038
0002ad 3159
0002ae 0a35
0002af 3047
0002b0 2031
0002b1 355a
0002b2 470a
0002b3 3030
0002b4 5820
0002b5 3634
0002b6 5920
0002b7 3135
0002b8 470a
0002b9 3130
0002ba 5a20
0002bb 352d
0002bc 470a
0002bd 3130
0002be 5820
0002bf 3735
0002c0 5920
0002c1 3135
0002c2 470a
0002c3 3130
0002c4 5820
0002c5 3135
0002c6 5920
0002c7 3637
0002c8 470a
0002c9 3130
0002ca 5820
0002cb 3634
0002cc 5920
0002cd 3135
0002ce 470a
0002cf 3130
0002d0 5a20
0002d1 392d
0002d2 470a
0002d3 3130
0002d4 5820
0002d5 3735
0002d6 5920
0002d7 3135
0002d8 470a
0002d9 3130
0002da 5820
0002db 3135
0002dc 5920
0002dd 3637
0002de 470a
0002df 3130
0002e0 5820
0002e1 3634
0002e2 5920
0002e3 3135
0002e4 470a
0002e5 3130
0002e6 5a20
0002e7 312d
0002e8 0a33
0002e9 3047
0002ea 2031
0002eb 3558
0002ec 2037
0002ed 3559
0002ee 0a31
0002ef 3047
0002f0 2031
0002f1 3558
0002f2 2031
0002f3 3759
0002f4 0a36
0002f5 3047
0002f6 2031
0002f7 3458
0002f8 2036
0002f9 3559
0002fa 0a31
0002fb 3047
0002fc 2031
0002fd 2d5a
0002fe 3731
0002ff 470a
000300 3130
000301 5820
000302 3735
000303 5920
000304 3135
000305 470a
000306 3130
000307 5820
000308 3135
000309 5920
00030a 3637
00030b 470a
00030c 3130
00030d 5820
00030e 3634
00030f 5920
000310 3135
000311 470a
000312 3130
000313 5a20
000314 0a35
000315 3047
000316 2030
000317 3058
000318 5920
000319 0a30
00031a 3047
00031b 2031
00031c 2d5a
00031d 0a35
00031e 3047
00031f 2031
000320 3058
000321 5920
000322 3032
000323 470a
000324 3130
000325 5820
000326 3031
000327 5920
000328 3032
000329 470a
00032a 3130
00032b 5820
00032c 3133
00032d 5920
00032e 3638
00032f 470a
000330 3130
000331 5820
000332 3232
000333 5920
000334 3638
000335 470a
000336 3130
000337 5820
000338 3232
000339 5920
00033a 3031
00033b 0a37
00033c 3047
00033d 2031
00033e 3758
00033f 2037
000340 3159
000341 3730
000342 470a
000343 3130
000344 5820
000345 3737
000346 5920
000347 3638
000348 470a
000349 3130
00034a 5820
00034b 3936
00034c 5920
00034d 3638
00034e 470a
00034f 3130
000350 5820
000351 3239
000352 5920
000353 3032
000354 470a
000355 3130
000356 5820
000357 3031
000358 2031
000359 3259
00035a 0a30
00035b 3047
00035c 2031
00035d 3158
00035e 3130
00035f 5920
000360 0a30
000361 3047
000362 2031
000363 3558
000364 2038
000365 3059
000366 470a
000367 3130
000368 5820
000369 3835
00036a 5920
00036b 3032
00036c 470a
00036d 3130
00036e 5820
00036f 3736
000370 5920
000371 3032
000372 470a
000373 3130
000374 5820
000375 3336
000376 5920
000377 3433
000378 470a
000379 3130
00037a 5820
00037b 3933
00037c 5920
00037d 3433
00037e 470a
00037f 3130
000380 5820
000381 3533
000382 5920
000383 3032
000384 470a
000385 3130
000386 5820
000387 3334
000388 5920
000389 3032
00038a 470a
00038b 3130
00038c 5820
00038d 3334
00038e 5920
00038f 0a30
000390 3047
000391 2031
000392 3058
000393 5920
000394 0a30
000395 3047
000396 2031
000397 2d5a
000398 0a39
000399 3047
00039a 2031
00039b 3058
00039c 5920
00039d 3032
00039e 470a
00039f 3130
0003a0 5820
0003a1 3031
0003a2 5920
0003a3 3032
0003a4 470a
0003a5 3130
0003a6 5820
0003a7 3133
0003a8 5920
0003a9 3638
0003aa 470a
0003ab 3130
0003ac 5820
0003ad 3232
0003ae 5920
0003af 3638
0003b0 470a
0003b1 3130
0003b2 5820
0003b3 3232
0003b4 5920
0003b5 3031
0003b6 0a37
0003b7 3047
0003b8 2031
0003b9 3758
0003ba 2037
0003bb 3159
0003bc 3730
0003bd 470a
0003be 3130
0003bf 5820
0003c0 3737
0003c1 5920
0003c2 3638
0003c3 470a
0003c4 3130
0003c5 5820
0003c6 3936
0003c7 5920
0003c8 3638
0003c9 470a
0003ca 3130
0003cb 5820
0003cc 3239
0003cd 5920
0003ce 3032
0003cf 470a
0003d0 3130
0003d1 5820
0003d2 3031
0003d3 2031
0003d4 3259
0003d5 0a30
0003d6 3047
0003d7 2031
0003d8 3158
0003d9 3130
0003da 5920
0003db 0a30
0003dc 3047
0003dd 2031
0003de 3558
0003df 2038
0003e0 3059
0003e1 470a
0003e2 3130
0003e3 5820
0003e4 3835
0003e5 5920
0003e6 3032
0003e7 470a
0003e8 3130
0003e9 5820
0003ea 3736
0003eb 5920
0003ec 3032
0003ed 470a
0003ee 3130
0003ef 5820
0003f0 3336
0003f1 5920
0003f2 3433
0003f3 470a
0003f4 3130
0003f5 5820
0003f6 3933
0003f7 5920
0003f8 3433
0003f9 470a
0003fa 3130
0003fb 5820
0003fc 3533
0003fd 5920
0003fe 3032
0003ff 470a
000400 3130
000401 5820
000402 3334
000403 5920
000404 3032
000405 470a
000406 3130
000407 5820
000408 3334
000409 5920
00040a 0a30
00040b 3047
00040c 2031
00040d 3058
00040e 5920
00040f 0a30
000410 3047
000411 2031
000412 2d5a
000413 3331
000414 470a
000415 3130
000416 5820
000417 2030
000418 3259
000419 0a30
00041a 3047
00041b 2031
00041c 3158
00041d 2030
00041e 3259
00041f 0a30
000420 3047
000421 2031
000422 3358
000423 2031
000424 3859
000425 0a36
000426 3047
000427 2031
000428 3258
000429 2032
00042a 3859
00042b 0a36
00042c 3047
00042d 2031
00042e 3258
00042f 2032
000430 3159
000431 3730
000432 470a
000433 3130
000434 5820
000435 3737
000436 5920
000437 3031
000438 0a37
000439 3047
00043a 2031
00043b 3758
00043c 2037
00043d 3859
00043e 0a36
00043f 3047
000440 2031
000441 3658
000442 2039
000443 3859
000444 0a36
000445 3047
000446 2031
000447 3958
000448 2032
000449 3259
00044a 0a30
00044b 3047
00044c 2031
00044d 3158
00044e 3130
00044f 5920
000450 3032
000451 470a
000452 3130
000453 5820
000454 3031
000455 2031
000456 3059
000457 470a
000458 3130
000459 5820
00045a 3835
00045b 5920
00045c 0a30
00045d 3047
00045e 2031
00045f 3558
000460 2038
000461 3259
000462 0a30
000463 3047
000464 2031
000465 3658
000466 2037
000467 3259
000468 0a30
000469 3047
00046a 2031
00046b 3658
00046c 2033
00046d 3359
00046e 0a34
00046f 3047
000470 2031
000471 3358
000472 2039
000473 3359
000474 0a34
000475 3047
000476 2031
000477 3358
000478 2035
000479 3259
00047a 0a30
00047b 3047
00047c 2031
00047d 3458
00047e 2033
00047f 3259
000480 0a30
000481 3047
000482 2031
000483 3458
000484 2033
000485 3059
000486 470a
000487 3130
000488 5820
000489 2030
00048a 3059
00048b 470a
00048c 3130
00048d 5a20
00048e 312d
00048f 0a37
000490 3047
000491 2031
000492 3058
000493 5920
000494 3032
000495 470a
000496 3130
000497 5820
000498 3031
000499 5920
00049a 3032
00049b 470a
00049c 3130
00049d 5820
00049e 3133
00049f 5920
0004a0 3638
0004a1 470a
0004a2 3130
0004a3 5820
0004a4 3232
0004a5 5920
0004a6 3638
0004a7 470a
0004a8 3130
0004a9 5820
0004aa 3232
0004ab 5920
0004ac 3031
0004ad 0a37
0004ae 3047
0004af 2031
0004b0 3758
0004b1 2037
0004b2 3159
0004b3 3730
0004b4 470a
0004b5 3130
0004b6 5820
0004b7 3737
0004b8 5920
0004b9 3638
0004ba 470a
0004bb 3130
0004bc 5820
0004bd 3936
0004be 5920
0004bf 3638
0004c0 470a
0004c1 3130
0004c2 5820
0004c3 3239
0004c4 5920
0004c5 3032
0004c6 470a
0004c7 3130
0004c8 5820
0004c9 3031
0004ca 2031
0004cb 3259
0004cc 0a30
0004cd 3047
0004ce 2031
0004cf 3158
0004d0 3130
0004d1 5920
0004d2 0a30
0004d3 3047
0004d4 2031
0004d5 3558
0004d6 2038
0004d7 3059
0004d8 470a
0004d9 3130
0004da 5820
0004db 3835
0004dc 5920
0004dd 3032
0004de 470a
0004df 3130
0004e0 5820
0004e1 3736
0004e2 5920
0004e3 3032
0004e4 470a
0004e5 3130
0004e6 5820
0004e7 3336
0004e8 5920
0004e9 3433
0004ea 470a
0004eb 3130
0004ec 5820
0004ed 3933
0004ee 5920
0004ef 3433
0004f0 470a
0004f1 3130
0004f2 5820
0004f3 3533
0004f4 5920
0004f5 3032
0004f6 470a
0004f7 3130
0004f8 5820
0004f9 3334
0004fa 5920
0004fb 3032
0004fc 470a
0004fd 3130
0004fe 5820
0004ff 3334
000500 5920
000501 0a30
000502 3047
000503 2031
000504 3058
000505 5920
000506 0a30
000507 3047
000508 2031
000509 355a
00050a 470a
00050b 3030
00050c 5820
00050d 2030
00050e 3059
00050f 5a20
000510 0a35
000511 304d
000512 2430                      GCODE: .db "G00 X0 Y0 Z5",10,"G00 X6 Y6",10,"G01 Z-5",10,"G01 X39 Y6",10,"G01 X39 Y16",10,"G01 X27 Y16",10,"G01 X35 Y40",10,"G01 X68 Y40",10,"G01 X75 Y16",10,"G01 X64 Y16",10,"G01 X64 Y6",10,"G01 X96 Y6",10,"G01 X96 Y16",10,"G01 X88 Y16",10,"G01 X61 Y92",                                 10,"G01 X71 Y92",10,"G01 X71 Y102",10,"G01 X30 Y102",10,"G01 X30 Y92",10,"G01 X40 Y92",10,"G01 X15 Y16",10,"G01 X6 Y16",10,"G01 X6 Y6",10,"G01 Z5",10,"G00 X38 Y45",10,"G01 Z-5",10,"G01 X65 Y45",10,"G01 X51  Y90",10,"G01 X38 Y45",10,"G01 X35 Y41",10,"G01 X                                 68 Y41",10,"G01 X68 Y43",10,"G01 X35 Y43",10,"G01 X35 Y43",10,"G01 X68 Y43",10,"G01 X77 Y15",10,"G01 X65 Y15",10,"G01 X65 Y9",10,"G01 X95 Y9",10,"G01 X95 Y15",10,"G01 X88 Y15",10,"G01 X88 Y13",10,"G01 X93 Y13",10,"G01 X93 Y10",10,"G01 X67 Y10",10,"G01 X67                                  Y13",10,"G01 X77 Y13",10,"G01 X77 Y12",10,"G01 X68 Y12",10,"G01 X92 Y12",10,"G01 X92 Y13",10,"G01 X78 Y13",10,"G01 X78 Y15",10,"G01 X88 Y15",10,"G01 X86 Y16",10,"G01 X76 Y16",10,"G01 X53  Y90",10,"G01 X55 Y90",10,"G01 X78 Y16",10,"G01 X80  Y16",10,"G01 X                                 57 Y90",10,"G01 X59 Y90",10,"G01 X82 Y16",10,"G01 X84 Y16",10,"G01 X61 Y90",10,"G01 X61 Y90",10,"G01 X86 Y16",10,"G01 X88 Y16 ",10,"G01 X60 Y91",10,"G01 X51 Y91",10,"G01 X51 Y94",10,"G01 X70 Y94",10,"G01 X70 Y101",10,"G01 X31 Y101",10,"G01 X31 Y99",10,"G0                                 1 X68 Y99",10,"G01 X68 Y98",10,"G01 X31 Y98",10,"G01 X31 Y96",10,"G01 X68 Y96",10,"G01 X68 Y95",10,"G01 X31 Y95",10,"G01 X31 Y93",10,"G01 X51 Y93",10,"G01 X26 Y16",10,"G01 X24 Y16",10,"G01 X50 Y95",10,"G01 X49 Y95",10,"G01 X23 Y16",10,"G01 X21 Y16",10,"G0                                 1 X47 Y95",10,"G01 X45 Y95",10,"G01 X20 Y16",10,"G01 X18 Y16",10,"G01 X43 Y95",10,"G01 X42 Y95",10,"G01 X16 Y16",10,"G01 X16 Y15",10,"G01 X7 Y15",10,"G01 X7 Y7",10,"G01 X38 Y7",10,"G01 X38 Y8",10,"G01 X8 Y8",10,"G01 X8 Y9",10,"G01 X38 Y9",10,"G01 X38 Y10"000513 e008                      ,10,"G01 X8 Y10",10,"G01 X8 Y11",10,"G01 X38 Y11",10,"G01 X38 Y12",10,"G01 X8 Y12",10,"G01 X8 Y13",10,"G01 X38 Y13",10,"G01 X38 Y14",10,"G01 X8 Y14",10,"G01 X8 Y15",10,"G01 X38 Y15",10,"G01 Z5",10,"G00 X46 Y51",10,"G01 Z-5",10,"G01 X57 Y51",10,"G01 X51 Y7000514 bf0e                      6",10,"G01 X46 Y51",10,"G01 Z-9",10,"G01 X57 Y51",10,"G01 X51 Y76",10,"G01 X46 Y51",10,"G01 Z-13",10,"G01 X57 Y51",10,"G01 X51 Y76",10,"G01 X46 Y51",10,"G01 Z-17",10,"G01 X57 Y51",10,"G01 X51 Y76",10,"G01 X46 Y51",10,"G01 Z5",10,"G00 X0 Y0",10,"G01 Z-5",1000515 ef0f                      0,"G01 X0 Y20",10,"G01 X10 Y20",10,"G01 X31 Y86",10,"G01 X22 Y86",10,"G01 X22 Y107",10,"G01 X77 Y107",10,"G01 X77 Y86",10,"G01 X69 Y86",10,"G01 X92 Y20",10,"G01 X101 Y20",10,"G01 X101 Y0",10,"G01 X58 Y0",10,"G01 X58 Y20",10,"G01 X67 Y20",10,"G01 X63 Y34",000516 bf0d                      10,"G01 X39 Y34",10,"G01 X35 Y20",10,"G01 X43 Y20",10,"G01 X43 Y0",10,"G01 X0 Y0",10,"G01 Z-9",10,"G01 X0 Y20",10,"G01 X10 Y20",10,"G01 X31 Y86",10,"G01 X22 Y86",10,"G01 X22 Y107",10,"G01 X77 Y107",10,"G01 X77 Y86",10,"G01 X69 Y86",10,"G01 X92 Y20",10,"G0                                 1 X101 Y20",10,"G01 X101 Y0",10,"G01 X58 Y0",10,"G01 X58 Y20",10,"G01 X67 Y20",10,"G01 X63 Y34",10,"G01 X39 Y34",10,"G01 X35 Y20",10,"G01 X43 Y20",10,"G01 X43 Y0",10,"G01 X0 Y0",10,"G01 Z-13",10,"G01 X0 Y20",10,"G01 X10 Y20",10,"G01 X31 Y86",10,"G01 X22 Y                                 86",10,"G01 X22 Y107",10,"G01 X77 Y107",10,"G01 X77 Y86",10,"G01 X69 Y86",10,"G01 X92 Y20",10,"G01 X101 Y20",10,"G01 X101 Y0",10,"G01 X58 Y0",10,"G01 X58 Y20",10,"G01 X67 Y20",10,"G01 X63 Y34",10,"G01 X39 Y34",10,"G01 X35 Y20",10,"G01 X43 Y20",10,"G01 X43000517 930f
000518 931f
000519 932f
00051a ef0f
00051b b904
00051c 912f
00051d 911f
00051e 910f                      ;Inicializacion del stack
00051f 930f
000520 931f
000521 932f
000522 e00f
000523 b907
000524 912f
000525 911f
000526 910f                      	ldi	t0,HIGH(RAMEND)
000527 930f
000528 931f
000529 932f
00052a e000
00052b b905
00052c 912f
00052d 911f
00052e 910f                      	out	SPH,t0
00052f 930f
000530 931f
000531 932f
000532 e000
000533 b908
000534 912f
000535 911f
000536 910f                      	ldi	t0,LOW(RAMEND)
                                 	out	SPL,t0
000537 930f
000538 931f
000539 932f
00053a e005
00053b 9300 0100
00053d 912f
00053e 911f
00053f 910f
000540 930f
000541 931f
000542 932f
000543 e006
000544 9300 0101
000546 912f
000547 911f
000548 910f
000549 930f
00054a 931f
00054b 932f
00054c e00a
00054d 9300 0102
00054f 912f
000550 911f
000551 910f
000552 930f
000553 931f
000554 932f
000555 e009
000556 9300 0103
000558 912f
000559 911f
00055a 910f
00055b 930f
00055c 931f
00055d 932f
00055e e000
00055f 9300 0104
000561 912f
000562 911f
000563 910f                      ;==========================================
000564 e604
000565 940e 05d9
000567 940e 05f6
000569 930f
00056a 931f
00056b 932f
00056c 93ef
00056d 93ff
00056e e3e2
00056f e0f0
000570 e02b
000571 e633
000572 953a
000573 f7f1
000574 952a
000575 f7e1
000576 9731
000577 30e0
000578 f7b9
000579 30f0
00057a f7a9
00057b 91ff
00057c 91ef
00057d 912f
00057e 911f
00057f 910f
000580 950a
000581 f719
000582 e604
000583 940e 0643
000585 930f
000586 931f
000587 932f
000588 93ef
000589 93ff
00058a e3e2
00058b e0f0
00058c e02b
00058d e633
00058e 953a
00058f f7f1
000590 952a
000591 f7e1
000592 9731
000593 30e0
000594 f7b9
000595 30f0
000596 f7a9
000597 91ff
000598 91ef
000599 912f
00059a 911f
00059b 910f
00059c 950a
00059d f729
00059e e604
00059f 940e 05d9
0005a1 940e 0660
0005a3 930f
0005a4 931f
0005a5 932f
0005a6 93ef
0005a7 93ff
0005a8 e3e2
0005a9 e0f0
0005aa e02b
0005ab e633
0005ac 953a
0005ad f7f1
0005ae 952a
0005af f7e1
0005b0 9731
0005b1 30e0
0005b2 f7b9
0005b3 30f0
0005b4 f7a9
0005b5 91ff
0005b6 91ef
0005b7 912f
0005b8 911f
0005b9 910f
0005ba 950a
0005bb f719
0005bc e604
0005bd 940e 0643
0005bf 930f
0005c0 931f
0005c1 932f
0005c2 93ef
0005c3 93ff
0005c4 e3e2
0005c5 e0f0
0005c6 e02b
0005c7 e633
0005c8 953a
0005c9 f7f1
0005ca 952a
0005cb f7e1
0005cc 9731
0005cd 30e0
0005ce f7b9
0005cf 30f0
0005d0 f7a9
0005d1 91ff
0005d2 91ef
0005d3 912f
0005d4 911f
0005d5 910f
0005d6 950a
0005d7 f729                      ;Inicializacion de puertos
                                 	outi DDRB,0xFF
                                 	outi DDRC,0x0F
0005d8 9508                      	outi PORTB,0x00
                                 	outi PORTC,0x00
                                 ;==========================================
0005d9 930f                      	initCNC
0005da 9100 0104
0005dc 7003
0005dd 9503
0005de 3004
0005df f409
0005e0 e000
0005e1 e0a0
0005e2 e0b1
0005e3 931f
0005e4 0fa0
0005e5 7010
0005e6 1fb1
0005e7 911f
0005e8 9110 0104
0005ea 7f1c
0005eb 2b01
0005ec 9300 0104
0005ee 910c
0005ef b115
0005f0 7f10
0005f1 2b01
0005f2 b905
0005f3 9573                      	cnctestmax
0005f4 910f                      loop:
0005f5 9508                      
                                 ret
0005f6 930f                      
0005f7 9110 0104
0005f9 7118
0005fa 9516
0005fb 9516
0005fc 9516
0005fd 9513
0005fe 3014
0005ff f409
000600 e010
000601 e0c0
000602 e0d1
000603 931f
000604 0fc1
000605 7010
000606 1fd1
000607 911f
000608 0f11
000609 0f11
00060a 0f11
00060b 9100 0104
00060d 7e07
00060e 2b10
00060f 9310 0104
000611 8108
000612 9502
000613 b115
000614 701f
000615 2b01
000616 b905
000617 9583                      xadd:
000618 910f                      	push t0
000619 9508                      	x_add
                                 	pop t0
00061a 930f                      ret
00061b 9120 0104
00061d 7c20
00061e 9526
00061f 9526
000620 9526
000621 9526
000622 9526
000623 9526
000624 9523
000625 3024
000626 f409
000627 e020
000628 e0e0
000629 e0f1
00062a 931f
00062b 0fe2
00062c 7010
00062d 1ff1
00062e 911f
00062f 9100 0104
000631 0f22
000632 0f22
000633 0f22
000634 0f22
000635 0f22
000636 0f22
000637 730f
000638 2b20
000639 9320 0104
00063b 8100
00063c b118
00063d 7f10
00063e 2b01
00063f b908
000640 9593                      yadd:
000641 910f                      	push t0
000642 9508                      	y_add
                                 	pop t0
000643 930f                      ret
000644 9100 0104
000646 7003
000647 950a
000648 3f0f
000649 f409
00064a e003
00064b e0a0
00064c e0b1
00064d 931f
00064e 0fa0
00064f 7010
000650 1fb1
000651 911f
000652 9110 0104
000654 7f1c
000655 2b01
000656 9300 0104
000658 910c
000659 b115
00065a 7f10
00065b 2b01
00065c b905
00065d 957a                      zadd:
00065e 910f                      	push t0
00065f 9508                      	z_add
                                 	pop t0
000660 930f                      ret
000661 9110 0104
000663 7118
000664 9516
000665 9516
000666 9516
000667 951a
000668 3f1f
000669 f409
00066a e013
00066b e0c0
00066c e0d1
00066d 931f
00066e 0fc1
00066f 7010
000670 1fd1
000671 911f
000672 0f11
000673 0f11
000674 0f11
000675 9100 0104
000677 7e07
000678 2b10
000679 9310 0104
00067b 8108
00067c 9502
00067d b115
00067e 701f
00067f 2b01
000680 b905
000681 958a                      xsub:
000682 910f                      	push t0
000683 9508                      	x_sub
                                 	pop t0
000684 930f                      ret
000685 9120 0104
000687 7c20
000688 9526
000689 9526
00068a 9526
00068b 9526
00068c 9526
00068d 9526
00068e 952a
00068f 3f2f
000690 f409
000691 e023
000692 e0e0
000693 e0f1
000694 931f
000695 0fe2
000696 7010
000697 1ff1
000698 911f
000699 9100 0104
00069b 0f22
00069c 0f22
00069d 0f22
00069e 0f22
00069f 0f22
0006a0 0f22
0006a1 730f
0006a2 2b20
0006a3 9320 0104
0006a5 8100
0006a6 b118
0006a7 7f10
0006a8 2b01
0006a9 b908
0006aa 959a                      ysub:
0006ab 910f                      	push t0
0006ac 9508                      	y_sub
                                 	pop t0
0006ad cfff                      ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   2 y  :   2 z  :   6 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 116 r17: 102 r18:  74 r19:   8 r20:   0 
r21:   0 r22:   0 r23:   2 r24:   2 r25:   2 r26:   4 r27:   4 r28:   4 
r29:   4 r30:  20 r31:  20 
Registers used: 16 out of 35 (45.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :   6 adiw  :   0 and   :   0 
andi  :  18 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   6 cbi   :   0 cbr   :   6 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  14 cpse  :   0 dec   :  18 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 inc   :   6 jmp   :   0 
ld    :   6 ldd   :   0 ldi   :  49 lds   :  12 lpm   :   0 lsl   :  18 
lsr   :  18 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :  12 ori   :   0 out   :  12 pop   :  59 
push  :  59 rcall :   0 ret   :   8 reti  :   0 rjmp  :   1 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   4 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  11 
sub   :   0 subi  :   0 swap  :   2 tst   :   0 wdr   :   0 
Instructions used: 24 out of 113 (21.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d5e    824   2598   3422   32768  10.4%
[.dseg] 0x000100 0x0001ce      0    206    206    2048  10.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
